funScale "[6][12]" :=    {
			    " C,  C#,  D,   D#,  E,   F,   F#,  G,   G#,  A,   A#,  B "
	" major "	    {1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0}, "  T functions of C,C#,D,D# etc.  "
			    {0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0}, "  D functions of C,C#,D,D# etc.  "
			    {1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0}, "  S functions of C,C#,D,D# etc.  "
				
	" harmonic minor "  {1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0}, "  t functions of C,C#,D,D# etc.  "
			    {0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0}, "  d functions of C,C#,D,D# etc.  "
			    {1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}  "  s functions of C,C#,D,D# etc.  "
			    }.

funDist "[3][3]" :=  {
			{ 0.0, 1.0, 0.5}, "  tonic -> tonic, dominant, subdominant  "
			{-0.2, 1.0, 0.8}, "  dominant -> tonic, dominant, subdominant  "
			{-0.5, 0.2, 1.0}  "  subdominant -> tonic, dominant, subdominant  "
			}.
 		
modeDist "[2][2]" := {
			{0.0, 2.0}, "  major -> major, minor  "
			{1.5, 0.0}  "  minor -> major, minor  "
			}.

tonalityDist "[2][7]" := {
			    {0.0,2.0,4.0,6.0,8.0,10.0,12.0}, "  fourths: 0,1,2,3,4,5,6  "
			    {0.0,2.0,4.0,6.0,8.0,10.0,12.0}  "  fifths: 0,1,2,3,4,5,6  "
			    }.
			    
"  Noll default table  "
nollProfile "[8][7]" :=  {	{4.1,1.7,3.7,1.3,0.7,0.5,1.1},  "  TON  "
				{4.1,1.7,3.7,1.3,0.7,0.5,1.1},  "  DOM  "
				{4.1,1.7,3.7,1.3,0.7,0.5,1.1},  "  SUB  "
				{4.1,1.7,3.7,1.3,0.5,0.7,1.1},  "  ton  "
				{4.1,1.7,3.7,1.3,0.5,0.7,1.1},  "  dom  "
				{4.1,1.7,3.7,1.3,0.5,0.7,1.1},  "  sub  "
				{4.1,1.7,3.7,1.3,0.7,0.5,1.1},  "  DOMdiss  "
				{4.1,1.7,3.7,1.3,0.5,0.7,1.1}}. "  subDiss  "

transitionProfile := 1.0.

"testing (nice for browsing the effects in transitionMatrix): 
  transitionFunction := [:startFunction :startMode :startTonality :targetFunction :targetMode :targetTonality |
  {startFunction, startMode, startTonality, targetFunction, targetMode, targetTonality}]."

tonalityDistance:=[:startTonality :targetTonality || chromDiff fifthDiff row col |
  chromDiff:=targetTonality - startTonality.
  (chromDiff < 0) ifTrue:[chromDiff:=chromDiff+12].
  fifthDiff:=(7 * chromDiff) mod:12.
  row:=(fifthDiff < 7) ifTrue:[1] ifFalse:[0].
  col:=(fifthDiff < 7) ifTrue:[fifthDiff] ifFalse:[(12 - fifthDiff) abs].
  (tonalityDist at:row) at:col].

tonalityDistanceMatrix:= tonalityDistance value:@ (12 iota) value:@2 (12 iota).
" or: (saves factor 12 in script generation: just create tonalityDistanceFromC!)
tonalityDistanceFromC:= tonalityDistance value:0 value:@2 (12 iota). 
tonalityDistanceMatrix:=[:arg | tonalityDistanceFromC at:@ ((((12 iota) - arg + 12) mod:12)] value:@ (12 iota).
"

transitionFunction := [:startFunction :startMode :startTonality :targetFunction :targetMode :targetTonality |
  (((funDist at:startFunction) at:targetFunction) + 
   ((modeDist at:startMode) at:targetMode) +  
   ((tonalityDistanceMatrix at:startTonality) at:targetTonality)) * 
   transitionProfile].


" does not work: (@ only works to next level of method call. {} shields it.)
  transitionMatrix := transitionFunction valueWithArguments:{ @ (3 iota) , @2 (2 iota) , @3 (12 iota) , @4 (3 iota) , @5 (2 iota) , @6 (12 iota) }."
transitionMatrix := transitionFunction value: @ (3 iota) value: @2 (2 iota) value: @3 (12 iota) value: @4 (3 iota) value: @5 (2 iota) value: @6 (12 iota) .
flatMatrix1 := transitionMatrix \ #++ \#++.
flatMatrix2 := (flatMatrix1 @ \ #++) @ \ #++.
sys browseKV:flatMatrix2.
