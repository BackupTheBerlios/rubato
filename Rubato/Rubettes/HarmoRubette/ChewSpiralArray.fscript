"Constants"
r:=1. "Radius"
h:=0.3. "Fifth height"
piBy2:=3.1415926/2.
w:={0.5, 0.3, 0.2}.
u:={0.5, 0.3, 0.2}.
w:={1/3, 1/3, 1/3}.
u:={1/3, 1/3, 1/3}.
W:={1/3, 1/3, 1/3}.
U:={1/3, 1/3, 1/3}.
a:=0.5.
b:=0.5.
U5:={U at:0, a*(U at:1), (1-a)*(U at:1), b*(U at:2), (1-b)*(U at:2)}. "see Tm, Chew page 55"
"Rubato Preferences"
kf:=0.5. "Slider Tonality (0:FunctionPoint=ChordPoint, 1:FunctionPoint=TonalityPoint)"
InverseDist:=[:d | 1/(1+d)].

ScalarProduct:=[:x :y| (#* value:@x value:@y) \ #+].
VectorLength:=[:vector | (([:coord | coord * coord ] value:@vector) \ #+) sqrt].
PointDist:=[:x :y | VectorLength value:(#- value:@y value:@x)].
PointPlus:=[:x :y | #+ value:@x value:@y].
ScaledPoint:=[:w :p| #* value:w value:@p].

" k is fifth coordinate"
P:=[:k | {r * ((k * piBy2) sin), r * ((k * piBy2) cos), k*h}].
CenterOfEffect:=[:weights :points | (ScaledPoint value:@weights value:@points) \ PointPlus]. 
CM:=[:k | CenterOfEffect value:w value:(P value:@{k,k+1,k+4})]. "Major triad point"
Cm:=[:k | CenterOfEffect value:u value:(P value:@{k,k+1,k-3})]. "Minor triad point"



MChords:=[:k | (CM value:@{k,k+1,k-1})].
mChords:=[:k | {Cm value:k, CM value:k+1, Cm value:k+1, Cm value:k-1, CM value:k-1}].

TM:=[:k | CenterOfEffect value:W value:(MChords value:k)]. "Major tonality point"
Tm:=[:k | CenterOfEffect value:U5 value:(mChords value:k)]. "Minor tonality point"

"Rubato Harmo Rubette:"
FunctionNames := {'T', 'S', 'D', 't', 'Dm', 'd', 's', 'Sm'}.
DiaNames:={'C','G','D','A','E','B','F'}.
modPlus:=[:k :m | (k+((((k abs) / m) ceiling)*m)) mod:m].
Accidental:=[:k ||n c| n:=((k+1)/7) floor. (n<0) ifTrue:[c:='b'] ifFalse:[c:='#']. 
  (n==0) ifTrue:[''] ifFalse:[([:x | c] value:@((n abs) iota)) \ #++]].
TonalityName:=[:k | (DiaNames at:(modPlus value:k value:7)) ++ (Accidental value:k)].
fToCMode:={CM,CM,CM,Cm,CM,Cm,Cm,CM}.
fToTMode:={TM,TM,TM,Tm,TM,Tm,Tm,TM}.
fToK:={0,1,-1,0,1,1,-1,-1}.
TChord:=[:k :f | (fToCMode at:f) value:(k+(fToK at:f))].
TTonality:=[:k :f | (fToTMode at:f) value:k].

"Chord tones given as Set (Array) of k"
ChordPoint:=[:klist ||points | points:= P value:@klist.  (points \ PointPlus) / (points count)].


"f is LocusNo (between 0 and 7, see TChords)"
RiemannFunctionPoint:=[:k :f | PointPlus 
  value:(ScaledPoint value:kf value:(TChord value:k value:f)) 
  value:(ScaledPoint value:(1-kf) value:(TTonality value:k value:f))].

RiemannFunctionValueAt:=[:k :f :klist | InverseDist value:
  (PointDist value:(RiemannFunctionPoint value:k value:f) value:(ChordPoint value:klist))].
  
DistanceMatrix:=[:k1 :f1 :k2 :f2 | 
   kf*(PointDist value:(TChord value:k1 value:f1) value:(TChord value:k2 value:f2)) + 
   (1-kf)*(PointDist value:(TTonality value:k1 value:f1) value:(TTonality value:k2 value:f2))].
  
PointDist value:{1,0,0} value:{0,1,0}.
{CM value:0, Cm value:0,TM value:0, Tm value:0}.

RiemannFunctionValueAt value:0 value:0 value:{0,1,4}.

[:k :f :klist | v:=RiemannFunctionValueAt value:k value:f value:klist. ((v*1000) ceiling) / 1000.0] 
  value:@2((13 iota) - 6) value:@(8 iota) value:{0,1,2,4}.
  
